{
    "contents" : "#' Calculate interpolated normalized reflectance\n#' @description Interpolate the radiance and irradiance data for a single event file. Then calculate normalized reflectance for the event file. Arguments include a single event dataset, the average panel reflectance, and the interpolation type (linear, spline, or cubic). Return a data frame with four columns: wavelength, irradiance, radiance, and normrefl (normal reflectance).\n#' @param eventdata A data frame of one observation made by a hyperspectrometer. This should have three columns: wavelength, irradiance, and radiance.\n#' @param calreflavgs The reflectance averages from a calibration panel (usually averaged from multiple scans of a panel).\n#' @param interpolation The interpolation type. Values include \"linear\", \"natural\" (spline), and \"fmm\" (cubic; the Forsythe, Malcolm and Moler method as described in the R help files for the spline() function. \"...an exact cubic is fitted through the four points at each end of the data, and this is used to determine the end conditions\")\n#' @param limitNR The limit of the normalized reflectance that should be used. \"nl\" (no limit) = allow all values; \"lim1\" = if a value is greater than 1 or less than -1, change the value to 1 or -1, respectively; limNA\" = if a value is greater than 1 or less than -1, change the value to NA.\n#' @return A data frame with four columns: wavelength, irradiance, radiance, and normrefl (normal reflectance).\n#' @export\n\ncalculateInterpNormRefl <- function(eventdata, calreflavgs, interpolation, limitNR){\n  data <- eventdata\n  calrefl <- calreflavgs\n  interpolation <- interpolation\n  allwaves <- seq(303, 1147, by = 1)\n  \n  #Step 1: interpolation\n  #Linear\n  if(interpolation == \"linear\"){\n    InterCalIrr <- approx(x = data$wavelength, y = data$irradiance,\n                          xout = allwaves,  method = \"linear\")\n    InterCalRad <- approx(x = data$wavelength, y = data$radiance,\n                          xout = allwaves,  method = \"linear\")\n    InterWhite <- approx(x = data$wavelength, y = calrefl$avg,\n                         xout = allwaves,  method = \"linear\")\n  }\n  \n  #Spline \n  if (interpolation == \"spline\"){\n    InterCalIrr <- spline(x = data$wavelength, y = data$irradiance,\n                          xout = allwaves, method = \"natural\")\n    InterCalRad <- spline(x = data$wavelength, y = data$radiance,\n                          xout = allwaves, method = \"natural\")\n    InterWhite <- spline(x = data$wavelength, y = calrefl$avg,\n                         xout = allwaves, method = \"natural\")  \n  }\n  \n  #Cubic \n  if (interpolation == \"cubic\"){\n    InterCalIrr <- spline(x = data$wavelength, y = data$irradiance,\n                          xout = allwaves, method = \"fmm\")\n    InterCalRad <- spline(x = data$wavelength, y = data$radiance,\n                          xout = allwaves, method = \"fmm\")\n    InterWhite <- spline(x = data$wavelength, y = calrefl$avg,\n                         xout = allwaves, method = \"fmm\")  \n  }\n  \n  interpdata <- data.frame(wavelength = InterCalIrr$x, irradiance = InterCalIrr$y,\n                           radiance = InterCalRad$y, calrefl = InterWhite$y)\n  \n  #Step 2: Calculate reflectance data by dividing the radiance by the irradiance\n  #at each wavelength\n  interpdata$refl <- (interpdata$radiance/interpdata$irradiance)\n  \n  #Step 3: Calculate the final reflectance by comparing the irradiance signal to\n  #the mean white panel signal (that is, normalize the data)\n  interpdata$normrefl <- (interpdata$refl/interpdata$calrefl)\n  \n  #Step 4: Remove values outside of the possible range of -1 to 1\n  if(limitNR == \"nl\"){}\n  if(limitNR == \"lim1\"){\n    interpdata$normrefl[which(interpdata$normrefl > 1)] <- 1\n    interpdata$normrefl[which(interpdata$normrefl < -1)] <- -1\n  }\n  if(limitNR == \"limNA\"){\n    interpdata$normrefl[which(interpdata$normrefl > 1)] <- NA\n    interpdata$normrefl[which(interpdata$normrefl < -1)] <- NA\n  }\n  return(interpdata)\n}\n",
    "created" : 1435432467053.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3005595346",
    "id" : "4D228C9C",
    "lastKnownWriteTime" : 1435435367,
    "path" : "~/GitHub/rHyperspec2/R/calculateInterpNormRefl.R",
    "project_path" : "R/calculateInterpNormRefl.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}